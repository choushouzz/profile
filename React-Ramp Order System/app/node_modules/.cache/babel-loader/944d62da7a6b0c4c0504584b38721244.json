{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from\"react\";import ProgressBar from\"../ProgressBar\";import Button from\"@material-ui/core/Button\";import Grid from\"@material-ui/core/Grid\";import{Select,MenuItem,InputLabel}from\"@material-ui/core\";import{sizing}from'@material-ui/system';var StatusBlock=/*#__PURE__*/function(_React$Component){_inherits(StatusBlock,_React$Component);var _super=_createSuper(StatusBlock);function StatusBlock(props){var _this;_classCallCheck(this,StatusBlock);_this=_super.call(this,props);_this.statuses=[\"Request Recieved\",\"Request Accepted\",\"Build Phase\",\"Paint Phase\",\"Out for Delivery\",\"Completed\"];_this.statuses[-1]=\"--\";_this.state={error:null,isLoaded:false,date:\"\"// progress: (0 / (this.statuses.length - 1)) * 100,\n};return _this;}_createClass(StatusBlock,[{key:\"componentDidMount\",value:function componentDidMount(){}// let new_progress = \"status\" in this.props.data ? this.statuses.indexOf(this.props.data[\"status\"]) : -1\n// if (new_progress >= this.statuses.length || new_progress < -1){\n//   new_progress = -1;\n// }\n// this.setState({\n//   // status: this.state.data[\"status\"],\n//   date: this.state.data[\"date_created\"],\n//   isLoaded: true,\n//   status: new_progress,\n//   statusInput: new_progress\n// });\n// handle(){\n//   const data = this.state.data\n// \tconst token = localStorage.getItem('token-access')\n//   const requestOptions = {\n//         method: 'POST',\n//         headers: {\n// \t\t\t      'Content-Type': 'application/json',\n// \t\t\t      'Authorization': 'Bearer ' + token\n// \t      },\n//         body: JSON.stringify(data)\n//   };\n//   const link =  '/order-information/' \n//   fetch(link, requestOptions)\n//         .then(async response => {\n//         const data = await response.json();\n//         // check for error response\n//         if (!response.ok) {\n//             // get error message from body or default to response status\n//             const error = (data && data.message) || response.status;\n//             return Promise.reject(error);\n//         }\n// \t\t\t    //  console.log(data.pk)\n//           // this.setState({ postId: data.pk })\n//   })\n//   .catch(error => {\n//       this.setState({ errorMessage: error });\n//       console.error('There was an error!', error);\n//   }); \n// }\n// saveData = e => {\n//   e.preventDefault();\n//   // TODO: make post request\n//   const new_status = this.state.statusInput;\n//   var data = this.state.data\n//   data[\"status\"] = this.statuses[new_status]\n//   this.setState({\n//     status:new_status,\n//     data:data\n//   })\n//   this.handle()\n// }\n},{key:\"render\",value:function render(){var _this2=this;// const { status, statusInput, date, error, isLoaded } = this.state;\nvar _this$props$statusSta=this.props.statusState,statusInput=_this$props$statusSta.statusInput,dirtyBit=_this$props$statusSta.dirtyBit;var statusMsg=this.statuses[statusInput];var progress=statusInput/(this.statuses.length-1);// if (error) {\n//   return <div> Error: {error.message}</div>\n// }\n// else if (!isLoaded) {\n//   return <div>Loading...</div>\n// }\n// else{\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"block \".concat(dirtyBit?\"unsaved\":\"\")},/*#__PURE__*/React.createElement(\"h2\",{className:\"block-title\"},\"Status\"),/*#__PURE__*/React.createElement(\"span\",{className:\"status-block-last-updated\"},\"Initial Request Date: \",/*#__PURE__*/React.createElement(\"strong\",null,this.props.date)),/*#__PURE__*/React.createElement(ProgressBar,{progress:progress}),/*#__PURE__*/React.createElement(\"span\",{className:\"status-block-status\"},statusMsg,/*#__PURE__*/React.createElement(\"br\",null)),this.props.isAdmin&&/*#__PURE__*/ // <Grid container>\n//   <Grid item md={10}>\nReact.createElement(Select,{className:\"status-bar-textfield\",value:statusMsg,onChange:function onChange(e){e.preventDefault();console.log('change!');_this2.props.handleStatusInput(_this2.statuses.indexOf(e.target.value));},type:\"number\",variant:\"outlined\"},this.statuses.map(function(status,i){return/*#__PURE__*/React.createElement(MenuItem,{value:status,key:i},status);}))// </Grid>\n//   <Grid item md={2}>\n//     <Button fullWidth variant=\"contained\" color=\"primary\" disabled={!dirtyBit} onClick={this.saveData}>Save</Button>\n//   </Grid>\n// </Grid>\n);}}]);return StatusBlock;}(React.Component);export default StatusBlock;","map":{"version":3,"sources":["C:/Users/owner/desktop/team/app/src/components/react-components/Dashboard/RampInfoPage/StatusBlock.js"],"names":["React","ProgressBar","Button","Grid","Select","MenuItem","InputLabel","sizing","StatusBlock","props","statuses","state","error","isLoaded","date","statusState","statusInput","dirtyBit","statusMsg","progress","length","isAdmin","e","preventDefault","console","log","handleStatusInput","indexOf","target","value","map","status","i","Component"],"mappings":"gnBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,wBAAjB,CACA,OAAQC,MAAR,CAAgBC,QAAhB,CAA0BC,UAA1B,KAA2C,mBAA3C,CACA,OAASC,MAAT,KAAuB,qBAAvB,C,GAEMC,CAAAA,W,sHAEJ,qBAAYC,KAAZ,CAAkB,6CAChB,uBAAMA,KAAN,EACA,MAAKC,QAAL,CAAgB,CACd,kBADc,CAEd,kBAFc,CAGd,aAHc,CAId,aAJc,CAKd,kBALc,CAMd,WANc,CAAhB,CAQA,MAAKA,QAAL,CAAc,CAAC,CAAf,EAAoB,IAApB,CAEA,MAAKC,KAAL,CAAa,CACXC,KAAK,CAAE,IADI,CAEXC,QAAQ,CAAE,KAFC,CAGXC,IAAI,CAAC,EACL;AAJW,CAAb,CAZgB,aAkBjB,C,qFAGmB,CAYnB,CAXC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGF;AACA;AAED;AACC;AACA;AACA;AACD;AACA;AACA;AACC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;AACC;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;uCAES,iBACP;AADO,0BAEyB,KAAKL,KAAL,CAAWM,WAFpC,CAEAC,WAFA,uBAEAA,WAFA,CAEaC,QAFb,uBAEaA,QAFb,CAGP,GAAMC,CAAAA,SAAS,CAAG,KAAKR,QAAL,CAAcM,WAAd,CAAlB,CACA,GAAMG,CAAAA,QAAQ,CAAIH,WAAW,EAAI,KAAKN,QAAL,CAAcU,MAAd,CAAuB,CAA3B,CAA7B,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,2BAAK,SAAS,iBAAWH,QAAQ,CAAG,SAAH,CAAe,EAAlC,CAAd,eACE,0BAAI,SAAS,CAAE,aAAf,WADF,cAIE,4BAAM,SAAS,CAAE,2BAAjB,wCACwB,kCACnB,KAAKR,KAAL,CAAWK,IADQ,CADxB,CAJF,cASE,oBAAC,WAAD,EAAa,QAAQ,CAAEK,QAAvB,EATF,cAUE,4BAAM,SAAS,CAAE,qBAAjB,EACGD,SADH,cAEE,8BAFF,CAVF,CAcI,KAAKT,KAAL,CAAWY,OAAX,gBACA;AACA;AACI,oBAAC,MAAD,EACE,SAAS,CAAI,sBADf,CAEE,KAAK,CAAEH,SAFT,CAGE,QAAQ,CAAE,kBAAAI,CAAC,CAAI,CAACA,CAAC,CAACC,cAAF,GAAoBC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAwB,MAAI,CAAChB,KAAL,CAAWiB,iBAAX,CAA6B,MAAI,CAAChB,QAAL,CAAciB,OAAd,CAAsBL,CAAC,CAACM,MAAF,CAASC,KAA/B,CAA7B,EAAoE,CAHlI,CAIE,IAAI,CAAC,QAJP,CAKE,OAAO,CAAC,UALV,EAOG,KAAKnB,QAAL,CAAcoB,GAAd,CAAkB,SAACC,MAAD,CAASC,CAAT,qBAAe,oBAAC,QAAD,EAAU,KAAK,CAAED,MAAjB,CAAyB,GAAG,CAAEC,CAA9B,EAAkCD,MAAlC,CAAf,EAAlB,CAPH,CAUF;AAEF;AACA;AACA;AACA;AAhCJ,CADF,CAqCD,C,yBArIuB/B,KAAK,CAACiC,S,EAwIhC,cAAezB,CAAAA,WAAf","sourcesContent":["import React from \"react\";\r\nimport ProgressBar from \"../ProgressBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Select, MenuItem, InputLabel} from \"@material-ui/core\";\r\nimport { sizing } from '@material-ui/system';\r\n\r\nclass StatusBlock extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.statuses = [\r\n      \"Request Recieved\",\r\n      \"Request Accepted\",\r\n      \"Build Phase\",\r\n      \"Paint Phase\",\r\n      \"Out for Delivery\",\r\n      \"Completed\"\r\n    ];\r\n    this.statuses[-1] = \"--\"\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      date:\"\",\r\n      // progress: (0 / (this.statuses.length - 1)) * 100,\r\n    };\r\n  }  \r\n\r\n\r\n  componentDidMount() {\r\n    // let new_progress = \"status\" in this.props.data ? this.statuses.indexOf(this.props.data[\"status\"]) : -1\r\n    // if (new_progress >= this.statuses.length || new_progress < -1){\r\n    //   new_progress = -1;\r\n    // }\r\n    // this.setState({\r\n    //   // status: this.state.data[\"status\"],\r\n    //   date: this.state.data[\"date_created\"],\r\n    //   isLoaded: true,\r\n    //   status: new_progress,\r\n    //   statusInput: new_progress\r\n    // });\r\n  }\r\n\r\n  // handle(){\r\n  //   const data = this.state.data\r\n    \r\n\t// \tconst token = localStorage.getItem('token-access')\r\n  //   const requestOptions = {\r\n  //         method: 'POST',\r\n  //         headers: {\r\n\t// \t\t\t      'Content-Type': 'application/json',\r\n\t// \t\t\t      'Authorization': 'Bearer ' + token\r\n\t// \t      },\r\n  //         body: JSON.stringify(data)\r\n  //   };\r\n  //   const link =  '/order-information/' \r\n  //   fetch(link, requestOptions)\r\n  //         .then(async response => {\r\n  //         const data = await response.json();\r\n    \r\n  //         // check for error response\r\n  //         if (!response.ok) {\r\n  //             // get error message from body or default to response status\r\n  //             const error = (data && data.message) || response.status;\r\n  //             return Promise.reject(error);\r\n  //         }\r\n\t// \t\t\t    //  console.log(data.pk)\r\n  //           // this.setState({ postId: data.pk })\r\n  //   })\r\n  //   .catch(error => {\r\n  //       this.setState({ errorMessage: error });\r\n  //       console.error('There was an error!', error);\r\n  //   }); \r\n\r\n  // }\r\n\r\n  // saveData = e => {\r\n  //   e.preventDefault();\r\n  //   // TODO: make post request\r\n  //   const new_status = this.state.statusInput;\r\n  //   var data = this.state.data\r\n  //   data[\"status\"] = this.statuses[new_status]\r\n  //   this.setState({\r\n  //     status:new_status,\r\n  //     data:data\r\n  //   })\r\n  //   this.handle()\r\n  // }\r\n\r\n  render() {\r\n    // const { status, statusInput, date, error, isLoaded } = this.state;\r\n    const {statusInput, dirtyBit} = this.props.statusState;\r\n    const statusMsg = this.statuses[statusInput];\r\n    const progress = (statusInput / (this.statuses.length - 1));\r\n    // if (error) {\r\n    //   return <div> Error: {error.message}</div>\r\n    // }\r\n    // else if (!isLoaded) {\r\n    //   return <div>Loading...</div>\r\n    // }\r\n    // else{\r\n\r\n    return (\r\n      <div className={`block ${dirtyBit ? \"unsaved\" : \"\"}`}>\r\n        <h2 className={\"block-title\"}>\r\n          Status\r\n        </h2>\r\n        <span className={\"status-block-last-updated\"}>\r\n          Initial Request Date: <strong>\r\n            {this.props.date}\r\n          </strong>\r\n        </span>\r\n        <ProgressBar progress={progress} />\r\n        <span className={\"status-block-status\"} > \r\n          {statusMsg}\r\n          <br/>\r\n        </span>\r\n        { this.props.isAdmin &&\r\n          // <Grid container>\r\n          //   <Grid item md={10}>\r\n              <Select\r\n                className = {\"status-bar-textfield\"}\r\n                value={statusMsg}\r\n                onChange={e => {e.preventDefault(); console.log('change!'); this.props.handleStatusInput(this.statuses.indexOf(e.target.value))}}\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n              >\r\n                {this.statuses.map((status, i) => <MenuItem value={status} key={i}>{status}</MenuItem>)}\r\n                \r\n              </Select>\r\n            // </Grid>\r\n\r\n          //   <Grid item md={2}>\r\n          //     <Button fullWidth variant=\"contained\" color=\"primary\" disabled={!dirtyBit} onClick={this.saveData}>Save</Button>\r\n          //   </Grid>\r\n          // </Grid>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatusBlock;"]},"metadata":{},"sourceType":"module"}