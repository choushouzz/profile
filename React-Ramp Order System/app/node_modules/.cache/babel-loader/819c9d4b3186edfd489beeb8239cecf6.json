{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\owner\\\\Desktop\\\\team\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from\"react\";import{Button,Grid}from'@material-ui/core';import RampDimensions from\"./RampDimensions\";import StatusBlock from\"./StatusBlock\";import Notes from\"./Notes\";import GeneralInfo from\"./GeneralInfo\";import\"../Admin/admin_styles.css\";/* Primary Component for the Admin Dashboard page */var RampInfoPage=/*#__PURE__*/function(_React$Component){_inherits(RampInfoPage,_React$Component);var _super=_createSuper(RampInfoPage);function RampInfoPage(props){var _this;_classCallCheck(this,RampInfoPage);_this=_super.call(this,props);// let new_progress = \"status\" in props.data ? this.statuses.indexOf(props.data[\"status\"]) : -1\n// if (new_progress >= this.statuses.length || new_progress < -1){\n//   new_progress = -1;\n// }\n_this.overallDirtyBit=function(){var states=[_this.state.noteState,_this.state.statusState,_this.state.infoState];return states.some(function(x){return x.dirtyBit;});};_this.handleNewNoteInput=function(e){e.preventDefault();// make a copy of the note state, and then update the newNote property\nvar noteStateCopy={};Object.assign(noteStateCopy,_this.state.noteState);noteStateCopy.newNote=e.target.value;// Save the note state\n_this.setState({noteState:noteStateCopy});};_this.saveNote=function(e){e.preventDefault();var months=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"December\"];var now=new Date();var date=\"\".concat(months[now.getMonth()],\" \").concat(now.getDate(),\", \").concat(now.getFullYear());var note=_this.state.newNote;var noteStateCopy={};Object.assign(noteStateCopy,_this.state.noteState);noteStateCopy.newNote=\"\";noteStateCopy.notes.push({date:date,author:\"user\",// TODO: update\nnote:note,dirtyBit:true});noteStateCopy.dirtyBit=true;_this.setState({noteState:noteStateCopy});};_this.handleStatusInput=function(status){var statusStateCopy={};Object.assign(statusStateCopy,_this.state.statusState);statusStateCopy.statusInput=status;statusStateCopy.dirtyBit=statusStateCopy.statusInput!=statusStateCopy.oldStatus;// Remains as such until the entire dash's changes are saved.\n_this.setState({statusState:statusStateCopy});};_this.state={noteState:{newNote:\"\",notes:[],dirtyBit:false},statusState:{statusInput:0,// This is what will be posted when \"save changes\" is pressed.\noldStatus:0,dirtyBit:false},infoState:{dirtyBit:false}};return _this;}_createClass(RampInfoPage,[{key:\"render\",value:function render(){var _this$props=this.props,data=_this$props.data,isAdmin=_this$props.isAdmin;return/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Grid,{item:true,xs:4},/*#__PURE__*/React.createElement(GeneralInfo,{isAdmin:isAdmin,data:data,infoState:this.state.infoState})),/*#__PURE__*/React.createElement(Grid,{item:true,container:true,xs:8},/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Grid,{item:true,xs:6},/*#__PURE__*/React.createElement(RampDimensions,{data:data,isAdmin:isAdmin})),/*#__PURE__*/React.createElement(Grid,{item:true,xs:6},/*#__PURE__*/React.createElement(StatusBlock,{isAdmin:isAdmin,statusState:this.state.statusState,date:data[\"date_created\"],handleStatusInput:this.handleStatusInput}))),isAdmin&&/*#__PURE__*/React.createElement(Notes,{noteState:this.state.noteState,saveNote:this.saveNote,handleNewNoteInput:this.handleNewNoteInput})),isAdmin&&/*#__PURE__*/React.createElement(Button,{fullWidth:true,variant:\"contained\",color:\"primary\",disabled:!this.overallDirtyBit()},\"Save\"));}}]);return RampInfoPage;}(React.Component);export default RampInfoPage;","map":{"version":3,"sources":["C:/Users/owner/desktop/team/app/src/components/react-components/Dashboard/RampInfoPage/index.js"],"names":["React","Button","Grid","RampDimensions","StatusBlock","Notes","GeneralInfo","RampInfoPage","props","overallDirtyBit","states","state","noteState","statusState","infoState","some","x","dirtyBit","handleNewNoteInput","e","preventDefault","noteStateCopy","Object","assign","newNote","target","value","setState","saveNote","months","now","Date","date","getMonth","getDate","getFullYear","note","notes","push","author","handleStatusInput","status","statusStateCopy","statusInput","oldStatus","data","isAdmin","Component"],"mappings":"gnBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,IAAjB,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAO,2BAAP,CAEA,oD,GACMC,CAAAA,Y,wHAEJ,sBAAYC,KAAZ,CAAkB,8CAChB,uBAAMA,KAAN,EAEA;AACA;AACA;AACA;AANgB,MAyBlBC,eAzBkB,CAyBA,UAAM,CACtB,GAAMC,CAAAA,MAAM,CAAG,CAAC,MAAKC,KAAL,CAAWC,SAAZ,CAAuB,MAAKD,KAAL,CAAWE,WAAlC,CAA+C,MAAKF,KAAL,CAAWG,SAA1D,CAAf,CACA,MAAOJ,CAAAA,MAAM,CAACK,IAAP,CAAY,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,QAAN,EAAb,CAAP,CACD,CA5BiB,OA+BlBC,kBA/BkB,CA+BG,SAAAC,CAAC,CAAI,CACxBA,CAAC,CAACC,cAAF,GACA;AACA,GAAMC,CAAAA,aAAa,CAAG,EAAtB,CACAC,MAAM,CAACC,MAAP,CAAcF,aAAd,CAA6B,MAAKV,KAAL,CAAWC,SAAxC,EACAS,aAAa,CAACG,OAAd,CAAwBL,CAAC,CAACM,MAAF,CAASC,KAAjC,CACA;AACA,MAAKC,QAAL,CAAc,CACZf,SAAS,CAAES,aADC,CAAd,EAGD,CAzCiB,OA2ClBO,QA3CkB,CA2CP,SAAAT,CAAC,CAAI,CACdA,CAAC,CAACC,cAAF,GAEA,GAAMS,CAAAA,MAAM,CAAG,CACb,SADa,CAEb,UAFa,CAGb,OAHa,CAIb,OAJa,CAKb,KALa,CAMb,MANa,CAOb,MAPa,CAQb,QARa,CASb,WATa,CAUb,SAVa,CAWb,UAXa,CAAf,CAcA,GAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CACA,GAAMC,CAAAA,IAAI,WAAMH,MAAM,CAACC,GAAG,CAACG,QAAJ,EAAD,CAAZ,aAAgCH,GAAG,CAACI,OAAJ,EAAhC,cAAkDJ,GAAG,CAACK,WAAJ,EAAlD,CAAV,CACA,GAAMC,CAAAA,IAAI,CAAG,MAAKzB,KAAL,CAAWa,OAAxB,CAEA,GAAMH,CAAAA,aAAa,CAAG,EAAtB,CACAC,MAAM,CAACC,MAAP,CAAcF,aAAd,CAA6B,MAAKV,KAAL,CAAWC,SAAxC,EACAS,aAAa,CAACG,OAAd,CAAwB,EAAxB,CACAH,aAAa,CAACgB,KAAd,CAAoBC,IAApB,CAAyB,CACvBN,IAAI,CAAEA,IADiB,CAEvBO,MAAM,CAAE,MAFe,CAEP;AAChBH,IAAI,CAAEA,IAHiB,CAIvBnB,QAAQ,CAAE,IAJa,CAAzB,EAMAI,aAAa,CAACJ,QAAd,CAAyB,IAAzB,CACA,MAAKU,QAAL,CAAc,CACZf,SAAS,CAAES,aADC,CAAd,EAGD,CA7EiB,OA+ElBmB,iBA/EkB,CA+EE,SAAAC,MAAM,CAAI,CAC5B,GAAMC,CAAAA,eAAe,CAAG,EAAxB,CACApB,MAAM,CAACC,MAAP,CAAcmB,eAAd,CAA+B,MAAK/B,KAAL,CAAWE,WAA1C,EAEA6B,eAAe,CAACC,WAAhB,CAA8BF,MAA9B,CACAC,eAAe,CAACzB,QAAhB,CAA2ByB,eAAe,CAACC,WAAhB,EAA+BD,eAAe,CAACE,SAA1E,CAAqF;AACrF,MAAKjB,QAAL,CAAc,CACZd,WAAW,CAAE6B,eADD,CAAd,EAGD,CAxFiB,CAQhB,MAAK/B,KAAL,CAAa,CACXC,SAAS,CAAE,CACTY,OAAO,CAAE,EADA,CAETa,KAAK,CAAE,EAFE,CAGTpB,QAAQ,CAAE,KAHD,CADA,CAMXJ,WAAW,CAAE,CACX8B,WAAW,CAAE,CADF,CACM;AACjBC,SAAS,CAAE,CAFA,CAGX3B,QAAQ,CAAE,KAHC,CANF,CAWXH,SAAS,CAAE,CACTG,QAAQ,CAAE,KADD,CAXA,CAAb,CARgB,aAuBjB,C,gEAmES,iBACgB,KAAKT,KADrB,CACDqC,IADC,aACDA,IADC,CACKC,OADL,aACKA,OADL,CAGR,mBACE,oBAAC,IAAD,EAAM,SAAS,KAAf,eACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,eACE,oBAAC,WAAD,EAAa,OAAO,CAAEA,OAAtB,CAA+B,IAAI,CAAGD,IAAtC,CAA6C,SAAS,CAAE,KAAKlC,KAAL,CAAWG,SAAnE,EADF,CADF,cAIE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,SAAS,KAApB,CAAqB,EAAE,CAAE,CAAzB,eACE,oBAAC,IAAD,EAAM,SAAS,KAAf,eACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,eACE,oBAAC,cAAD,EAAgB,IAAI,CAAG+B,IAAvB,CAA8B,OAAO,CAAEC,OAAvC,EADF,CADF,cAIE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,eACE,oBAAC,WAAD,EAAa,OAAO,CAAEA,OAAtB,CAA+B,WAAW,CAAE,KAAKnC,KAAL,CAAWE,WAAvD,CAAoE,IAAI,CAAEgC,IAAI,CAAC,cAAD,CAA9E,CAAgG,iBAAiB,CAAE,KAAKL,iBAAxH,EADF,CAJF,CADF,CASGM,OAAO,eACH,oBAAC,KAAD,EAAO,SAAS,CAAE,KAAKnC,KAAL,CAAWC,SAA7B,CAAwC,QAAQ,CAAE,KAAKgB,QAAvD,CAAiE,kBAAkB,CAAE,KAAKV,kBAA1F,EAVP,CAJF,CAgBG4B,OAAO,eACN,oBAAC,MAAD,EAAQ,SAAS,KAAjB,CAAkB,OAAO,CAAC,WAA1B,CAAsC,KAAK,CAAC,SAA5C,CAAsD,QAAQ,CAAE,CAAC,KAAKrC,eAAL,EAAjE,SAjBJ,CADF,CAyBD,C,0BAxHwBT,KAAK,CAAC+C,S,EA2HjC,cAAexC,CAAAA,YAAf","sourcesContent":["import React from \"react\";\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport RampDimensions from \"./RampDimensions\";\r\nimport StatusBlock from \"./StatusBlock\";\r\nimport Notes from \"./Notes\";\r\nimport GeneralInfo from \"./GeneralInfo\";\r\nimport \"../Admin/admin_styles.css\";\r\n\r\n/* Primary Component for the Admin Dashboard page */\r\nclass RampInfoPage extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    // let new_progress = \"status\" in props.data ? this.statuses.indexOf(props.data[\"status\"]) : -1\r\n    // if (new_progress >= this.statuses.length || new_progress < -1){\r\n    //   new_progress = -1;\r\n    // }\r\n\r\n    this.state = {\r\n      noteState: {\r\n        newNote: \"\",\r\n        notes: [],\r\n        dirtyBit: false\r\n      },\r\n      statusState: {\r\n        statusInput: 0,  // This is what will be posted when \"save changes\" is pressed.\r\n        oldStatus: 0,\r\n        dirtyBit: false\r\n      },\r\n      infoState: {\r\n        dirtyBit: false\r\n      }\r\n    }\r\n  }\r\n\r\n  overallDirtyBit = () => {\r\n    const states = [this.state.noteState, this.state.statusState, this.state.infoState];\r\n    return states.some(x => x.dirtyBit)\r\n  }\r\n\r\n  // We place states here so that there is simply ONE universal save button\r\n  handleNewNoteInput = e => {\r\n    e.preventDefault();\r\n    // make a copy of the note state, and then update the newNote property\r\n    const noteStateCopy = {}\r\n    Object.assign(noteStateCopy, this.state.noteState)\r\n    noteStateCopy.newNote = e.target.value\r\n    // Save the note state\r\n    this.setState({\r\n      noteState: noteStateCopy \r\n    });\r\n  }\r\n\r\n  saveNote = e => {\r\n    e.preventDefault();\r\n\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"December\"\r\n    ];\r\n\r\n    const now = new Date();\r\n    const date = `${months[now.getMonth()]} ${now.getDate()}, ${now.getFullYear()}`;\r\n    const note = this.state.newNote;\r\n\r\n    const noteStateCopy = {};\r\n    Object.assign(noteStateCopy, this.state.noteState);\r\n    noteStateCopy.newNote = \"\";\r\n    noteStateCopy.notes.push({\r\n      date: date,\r\n      author: \"user\", // TODO: update\r\n      note: note,\r\n      dirtyBit: true\r\n    });\r\n    noteStateCopy.dirtyBit = true;\r\n    this.setState({\r\n      noteState: noteStateCopy\r\n    })\r\n  }\r\n\r\n  handleStatusInput = status => {\r\n    const statusStateCopy = {};\r\n    Object.assign(statusStateCopy, this.state.statusState);\r\n\r\n    statusStateCopy.statusInput = status;\r\n    statusStateCopy.dirtyBit = statusStateCopy.statusInput != statusStateCopy.oldStatus; // Remains as such until the entire dash's changes are saved.\r\n    this.setState({\r\n      statusState: statusStateCopy\r\n    });\r\n  }\r\n\r\n  render () {\r\n    const {data, isAdmin} = this.props;\r\n\r\n    return (\r\n      <Grid container>\r\n        <Grid item xs={4}>\r\n          <GeneralInfo isAdmin={isAdmin} data={ data } infoState={this.state.infoState}/>\r\n        </Grid>\r\n        <Grid item container xs={8}>\r\n          <Grid container>\r\n            <Grid item xs={6}>\r\n              <RampDimensions data={ data } isAdmin={isAdmin} />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <StatusBlock isAdmin={isAdmin} statusState={this.state.statusState} date={data[\"date_created\"]} handleStatusInput={this.handleStatusInput}/>\r\n            </Grid>\r\n          </Grid>\r\n          {isAdmin \r\n            && <Notes noteState={this.state.noteState} saveNote={this.saveNote} handleNewNoteInput={this.handleNewNoteInput}/>}\r\n        </Grid>\r\n        {isAdmin && \r\n          <Button fullWidth variant=\"contained\" color=\"primary\" disabled={!this.overallDirtyBit()} >\r\n            Save\r\n          </Button>\r\n        }\r\n      </Grid>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default RampInfoPage;\r\n"]},"metadata":{},"sourceType":"module"}